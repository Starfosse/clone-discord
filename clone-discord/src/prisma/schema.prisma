// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum stateList{
  ONLINE
  ABSENT
  BUSY
  OFFLINE
}

model User {
  id String @id @default(uuid())
  userId String @unique
  pseudo String
  imageUrl String @default("")
  state stateList @default(OFFLINE)

  servers Server[]
  members Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Server{
  id String @id @default(uuid())
  name String
  imageUrl String
  inviteCode String @unique

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  channels Channel[]
  members Member[]
  channelGroups ChannelGroup[]
  memberRoles MemberRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([userId])
}

enum ChannelType{
  TEXT
  AUDIO
  VIDEO
}

model Channel{
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)
  isPrivate Boolean @default(false)

  serverId String
  server Server @relation(fields: [serverId], references:[id], onDelete: Cascade)

  channelGroupId String?
  channelGroupe ChannelGroup? @relation(fields: [channelGroupId], references: [id], onDelete: Cascade)

  roleRequired MemberRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([serverId])
  @@index([channelGroupId])
}

model ChannelGroup{
  id String @id @default(uuid())
  name String
  isPrivate Boolean @default(false)

  serverId String
  server Server @relation(fields: [serverId], references:[id], onDelete: Cascade)

  channels Channel[]
  roleRequired MemberRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([serverId])
}

model MemberRole{
  id String @id @default(uuid())
  role String
  orderServ Int?
  channelGroupId String?
  channelGroup ChannelGroup? @relation(fields: [channelGroupId], references: [id], onDelete: Cascade)

  channelId String?
  channel Channel? @relation(fields: [channelId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references:[id], onDelete: Cascade)

  memberId String?
  member Member? @relation(fields: [memberId], references:[id], onDelete: Cascade)

  invite_Member Boolean @default(false)
  expulsate_Member Boolean @default(false)
  edit_Server Boolean @default(false)
  role_Management Boolean @default(false)
  view_Logs Boolean @default(false)
  create_Remove_Channel Boolean @default(false)
  edit_Channel Boolean @default(false)
  view_Channel Boolean @default(false)
  write_Channel Boolean @default(false)
  speak_Channel Boolean @default(false)
  video_Channel Boolean @default(false)
  download_Channel Boolean @default(false)
  
  @@index([channelId])
  @@index([channelGroupId])
  @@index([serverId])
  @@index([memberId])
}

model Member{
  id String @id @default(uuid())
  serverId String
  server Server @relation(fields: [serverId], references:[id], onDelete: Cascade)

  userId String
  user User @relation(fields:[userId], references: [id], onDelete: Cascade)

  role MemberRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([serverId])
  @@index([userId])
}

model LogServer{
  id String @id @default(uuid())
  log String[]
  logDate DateTime[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
